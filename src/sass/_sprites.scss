/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
$antishock-name: 'antishock';
$antishock-x: 0px;
$antishock-y: 87px;
$antishock-offset-x: 0px;
$antishock-offset-y: -87px;
$antishock-width: 63px;
$antishock-height: 63px;
$antishock-total-width: 638px;
$antishock-total-height: 150px;
$antishock-image: '../images/sprite.png';
$antishock: (0px, 87px, 0px, -87px, 63px, 63px, 638px, 150px, '../images/sprite.png', 'antishock', );
$arrow-name: 'arrow';
$arrow-x: 0px;
$arrow-y: 29px;
$arrow-offset-x: 0px;
$arrow-offset-y: -29px;
$arrow-width: 88px;
$arrow-height: 58px;
$arrow-total-width: 638px;
$arrow-total-height: 150px;
$arrow-image: '../images/sprite.png';
$arrow: (0px, 29px, 0px, -29px, 88px, 58px, 638px, 150px, '../images/sprite.png', 'arrow', );
$logotype-name: 'logotype';
$logotype-x: 88px;
$logotype-y: 29px;
$logotype-offset-x: -88px;
$logotype-offset-y: -29px;
$logotype-width: 96px;
$logotype-height: 34px;
$logotype-total-width: 638px;
$logotype-total-height: 150px;
$logotype-image: '../images/sprite.png';
$logotype: (88px, 29px, -88px, -29px, 96px, 34px, 638px, 150px, '../images/sprite.png', 'logotype', );
$yandex-name: 'yandex';
$yandex-x: 0px;
$yandex-y: 0px;
$yandex-offset-x: 0px;
$yandex-offset-y: 0px;
$yandex-width: 638px;
$yandex-height: 29px;
$yandex-total-width: 638px;
$yandex-total-height: 150px;
$yandex-image: '../images/sprite.png';
$yandex: (0px, 0px, 0px, 0px, 638px, 29px, 638px, 150px, '../images/sprite.png', 'yandex', );
$spritesheet-width: 638px;
$spritesheet-height: 150px;
$spritesheet-image: '../images/sprite.png';
$spritesheet-sprites: ($antishock, $arrow, $logotype, $yandex, );
$spritesheet: (638px, 150px, '../images/sprite.png', $spritesheet-sprites, );

/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
